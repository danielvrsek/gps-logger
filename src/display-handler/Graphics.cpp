#include "Graphics.h"


const byte icon_bluetooth[] PROGMEM
{
	0x09, 0x0f, 0x10, 0x30, 0x60, 0xe0, 0xff, 0xc6, 0x6c, 0x38, 0x10, 0x04, 0x06, 0x03, 0x03, 0x7f, 0x31, 0x1b, 0x0e, 0x04
};

const byte icon_gps[] PROGMEM
{
	0x09, 0x0f, 0x78, 0xfe, 0xc7, 0x03, 0x03, 0x03, 0xc7, 0xfe, 0x78, 0x00, 0x01, 0x07, 0x1f, 0x7f, 0x1f, 0x07, 0x01, 0x00
};

const byte font_units_k [] PROGMEM
{
	0x08, 0x0b, 0x02, 0xff, 0x80, 0xc0, 0x30, 0x10, 0x10, 0x00, 0x04, 0x07, 0x04, 0x00, 0x03, 0x04, 0x04, 0x04
};

const byte font_units_m [] PROGMEM
{
	0x0b, 0x0b, 0x20, 0xf0, 0x20, 0x10, 0x10, 0xe0, 0x20, 0x10, 0x10, 0xe0, 0x00, 0x04, 0x07, 0x04, 0x00, 0x04, 0x07, 0x04, 0x00, 0x04, 0x07, 0x04
};

const byte font_units_slash [] PROGMEM
{
	0x04, 0x0b, 0x00, 0xe0, 0x1c, 0x03, 0x06, 0x01, 0x00, 0x00
};

const byte font_units_h [] PROGMEM
{
	0x07, 0x0b, 0x02, 0xff, 0x20, 0x10, 0x10, 0xe0, 0x00, 0x04, 0x07, 0x04, 0x00, 0x04, 0x07, 0x04
};

const byte font_main_digits [10][16] PROGMEM
{
	{ 0x07, 0x0c, 0xf8, 0x06, 0x01, 0x01, 0x01, 0x06, 0xf8, 0x01, 0x06, 0x08, 0x08, 0x08, 0x06, 0x01 },  // 48 - 0
	{ 0x05, 0x0c, 0x04, 0x02, 0xff, 0x00, 0x00, 0x08, 0x08, 0x0f, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00 },  // 49 - 1
	{ 0x07, 0x0c, 0x06, 0x01, 0x01, 0x81, 0x41, 0x22, 0x1c, 0x0c, 0x0a, 0x09, 0x08, 0x08, 0x08, 0x0c },  // 50 - 2
	{ 0x07, 0x0c, 0x00, 0x02, 0x21, 0x21, 0x31, 0x4e, 0x80, 0x04, 0x08, 0x08, 0x08, 0x08, 0x04, 0x03 },  // 51 - 3
	{ 0x07, 0x0c, 0x80, 0x60, 0x18, 0x06, 0xff, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x0f, 0x01, 0x01 },  // 52 - 4
	{ 0x07, 0x0c, 0x00, 0x1f, 0x11, 0x11, 0x11, 0x21, 0xc1, 0x04, 0x08, 0x08, 0x08, 0x08, 0x04, 0x03 },  // 53 - 5
	{ 0x07, 0x0c, 0xf8, 0x44, 0x22, 0x21, 0x21, 0x41, 0x80, 0x03, 0x04, 0x08, 0x08, 0x08, 0x04, 0x03 },  // 54 - 6
	{ 0x07, 0x0c, 0x07, 0x01, 0x01, 0x01, 0xc1, 0x39, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x00, 0x00 },  // 55 - 7
	{ 0x07, 0x0c, 0x8c, 0x52, 0x21, 0x21, 0x21, 0x52, 0x8c, 0x03, 0x04, 0x08, 0x08, 0x08, 0x04, 0x03 },  // 56 - 8
	{ 0x07, 0x0c, 0x1c, 0x22, 0x41, 0x41, 0x41, 0x22, 0xfc, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x03 },  // 57 - 9
};

const byte font_main_letters [26][20] PROGMEM
{
	{ 0x09, 0x0b, 0x00, 0x80, 0x70, 0x4c, 0x43, 0x4c, 0x70, 0x80, 0x00, 0x04, 0x07, 0x04, 0x00, 0x00, 0x00, 0x04, 0x07, 0x04 }, // 65 - A
	{ 0x08, 0x0b, 0x01, 0xff, 0x21, 0x21, 0x21, 0x21, 0x52, 0x8c, 0x04, 0x07, 0x04, 0x04, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00 }, // 66 - B
	{ 0x08, 0x0b, 0xfc, 0x02, 0x01, 0x01, 0x01, 0x01, 0x02, 0x07, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x00, 0x00 }, // 67 - C
	{ 0x09, 0x0b, 0x01, 0x01, 0xff, 0x01, 0x01, 0x01, 0x02, 0x04, 0xf8, 0x04, 0x04, 0x07, 0x04, 0x04, 0x04, 0x02, 0x01, 0x00 }, // 68 - D
	{ 0x07, 0x0b, 0x01, 0xff, 0x21, 0x21, 0x21, 0x71, 0x03, 0x04, 0x07, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00, 0x00, 0x00, 0x00 }, // 69 - E
	{ 0x07, 0x0b, 0x01, 0xff, 0x21, 0x21, 0x21, 0x71, 0x03, 0x04, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 70 - F
	{ 0x09, 0x0b, 0xfc, 0x02, 0x01, 0x01, 0x01, 0x01, 0x22, 0xe7, 0x20, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x02, 0x01, 0x00 }, // 71 - G
	{ 0x09, 0x0b, 0x01, 0xff, 0x21, 0x20, 0x20, 0x20, 0x21, 0xff, 0x01, 0x04, 0x07, 0x04, 0x00, 0x00, 0x00, 0x04, 0x07, 0x04 }, // 72 - H
	{ 0x03, 0x0b, 0x01, 0xff, 0x01, 0x04, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 73 - I
	{ 0x05, 0x0b, 0x00, 0x00, 0x01, 0xff, 0x01, 0x02, 0x04, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 74 - J
	{ 0x09, 0x0b, 0x01, 0xff, 0x41, 0x30, 0x48, 0x85, 0x03, 0x01, 0x00, 0x04, 0x07, 0x04, 0x00, 0x00, 0x00, 0x05, 0x06, 0x04 }, // 75 - K
	{ }, // 76 - L
	{ 0x09, 0x0b, 0xff, 0x0e, 0x70, 0x80, 0x00, 0x80, 0x70, 0x0e, 0xff, 0x07, 0x00, 0x00, 0x01, 0x06, 0x01, 0x00, 0x00, 0x07 }, // 77 - M
	{ 0x09, 0x0b, 0x01, 0xff, 0x06, 0x18, 0x60, 0x80, 0x01, 0xff, 0x01, 0x04, 0x07, 0x04, 0x00, 0x00, 0x01, 0x02, 0x07, 0x00 }, // 78 - N
	{ }, // 79 - O
	{ 0x07, 0x0b, 0x01, 0xff, 0x21, 0x21, 0x21, 0x12, 0x0c, 0x04, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 80 - P
	{ }, // 81 - Q
	{ 0x08, 0x0b, 0x01, 0xff, 0x21, 0x61, 0xa1, 0x12, 0x0c, 0x00, 0x04, 0x07, 0x04, 0x00, 0x00, 0x01, 0x06, 0x04, 0x00, 0x00 }, // 82 - R
	{ 0x06, 0x0b, 0x0c, 0x12, 0x21, 0x21, 0x42, 0x87, 0x07, 0x02, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 83 - S
	{ 0x07, 0x0b, 0x03, 0x01, 0x01, 0xff, 0x01, 0x01, 0x03, 0x00, 0x00, 0x04, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 84 - T
	{ }, // 85 - U
	{ }, // 86 - V
	{ }, // 87 - W
	{ 0x09, 0x0b, 0x01, 0x03, 0x05, 0xd8, 0x20, 0xd8, 0x05, 0x03, 0x01, 0x04, 0x06, 0x05, 0x00, 0x00, 0x00, 0x05, 0x06, 0x04 }, // 88 - X
	{ }, // 89 - Y
	{ } // 90 - Z
};

const byte font_data_digits [10][23] PROGMEM
{
	{ 0x0a, 0x0d, 0xfc, 0xfe, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xfe, 0xfc, 0x0f, 0x1f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x1f, 0x0f, 0x00 },  // 48 - 0
	{ 0x04, 0x0d, 0x03, 0x03, 0xff, 0xff, 0x00, 0x00, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 49 - 1
	{ 0x0a, 0x0d, 0x03, 0x83, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x7e, 0x3c, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00 },  // 50 - 2
	{ 0x0a, 0x0d, 0x03, 0x43, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x7e, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x1f, 0x0f, 0x00 },  // 51 - 3
	{ 0x0a, 0x0d, 0xc0, 0xe0, 0x3c, 0x3c, 0x03, 0x03, 0xff, 0xff, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x3f, 0x3f, 0x03, 0x03, 0x00 },  // 52 - 4
	{ 0x0a, 0x0d, 0xff, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x83, 0x03, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x1f, 0x0f, 0x00 },  // 53 - 5
	{ 0x0a, 0x0d, 0xfc, 0xfe, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x81, 0x00, 0x0f, 0x1f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x1f, 0x0f, 0x00 },  // 54 - 6
	{ 0x0a, 0x0d, 0x03, 0x03, 0x03, 0x03, 0x03, 0xc3, 0xf3, 0x3f, 0x0f, 0x03, 0x00, 0x00, 0x30, 0x3c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 55 - 7
	{ 0x0a, 0x0d, 0x3c, 0x7e, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x7e, 0x3c, 0x0f, 0x1f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x1f, 0x0f, 0x00 },  // 56 - 8
	{ 0x0a, 0x0d, 0x3c, 0x7e, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0xfc, 0x00, 0x10, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x1f, 0x0f, 0x00 },  // 57 - 9
};

const byte font_data_comma [] PROGMEM
{
	0x04, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x30, 0x30, 0x00 
};

const byte font_speed_digits [10][50] PROGMEM
{																												  //																							   //
	{ 0x10, 0x17, 0xf8, 0xf8, 0xfc, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xfc, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x1f, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1f, 0x0f, 0x0f },  // 48 - 0
	{ 0x06, 0x17, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 49 - 1
	{ 0x10, 0x17, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xfc, 0xf8, 0xf8, 0xe0, 0xe0, 0xf0, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x07, 0x03, 0x03, 0x7f, 0x7f, 0x7f, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70 },  // 50 - 2
	{ 0x10, 0x17, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xfc, 0xf8, 0xf8, 0x00, 0x00, 0x04, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0xe7, 0xe3, 0xe3, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1f, 0x0f, 0x0f },  // 51 - 3
	{ 0x10, 0x17, 0x00, 0x00, 0x80, 0xc0, 0xf0, 0x7c, 0x1f, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0xff, 0xc3, 0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7f, 0x7f, 0x7f, 0x01, 0x01, 0x01 },  // 52 - 4
	{ 0x10, 0x17, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1f, 0x1f, 0x1f, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0xf0, 0xe0, 0xe0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1f, 0x0f, 0x0f },  // 53 - 5
	{ 0x10, 0x17, 0xf8, 0xf8, 0xfc, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0xf0, 0xe0, 0xe0, 0x0f, 0x0f, 0x1f, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1f, 0x0f, 0x0f },  // 54 - 6
	{ 0x10, 0x17, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x87, 0xff, 0xff, 0x7f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf8, 0x7e, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x7e, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // 55 - 7
	{ 0x10, 0x17, 0xf8, 0xf8, 0xfc, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xfc, 0xf8, 0xf8, 0xe3, 0xe3, 0xe7, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0xe7, 0xe3, 0xe3, 0x0f, 0x0f, 0x1f, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1f, 0x0f, 0x0f },  // 56 - 8
	{ 0x10, 0x17, 0xf8, 0xf8, 0xfc, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xfc, 0xf8, 0xf8, 0x03, 0x03, 0x07, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0xff, 0xff, 0xff, 0x00, 0x00, 0x10, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x1f, 0x0f, 0x0f },  // 57 - 9
};

byte* Font::createEmptyBitmapArray(uint8_t width, uint8_t height)
{
	uint8_t length = Bitmap::arrayLength(width, height);
	
	byte* array = new byte[length + 2];
	
	array[0] = width;
	array[1] = height;
	
	for (byte i = 2; i < length + 2; i++)
		array[i] = 0x00;
	
	return array;
}

Bitmap::Bitmap(const byte* bitmapArray)
{
	width = pgm_read_word(bitmapArray);
	height = pgm_read_word(bitmapArray + 1);
	
	byte length = arrayLength(width, height);
	value = new byte[length];
	for (byte i = 0; i < length; i++)
		value[i] = pgm_read_word(bitmapArray + i + 2);	
}

Bitmap::Bitmap(byte* bitmapArray)
{
	width = bitmapArray[0];
	height = bitmapArray[1];
	
	value = &bitmapArray[2];
}

Bitmap* BluetoothIcon::getBitmap()
{
	return new Bitmap(icon_bluetooth);
}

Bitmap* GpsIcon::getBitmap()
{
	return new Bitmap(icon_gps);
}

Bitmap* MainFont::getBitmapFromCharacter(char character)
{
	if (character >= 48 && character <= 57)
		return new Bitmap(font_main_digits[character - 48]);	
	else if (character >= 65 && character <= 90)
		return new Bitmap(font_main_letters[character - 65]);
	else if (character == 32)
		return new Bitmap(createEmptyBitmapArray(0x02, 0x0b));
}

Bitmap* SpeedFont::getBitmapFromCharacter(char character)
{
	if (character >= 48 && character <= 57)
		return new Bitmap(font_speed_digits[character - 48]);	
}

Bitmap* UnitsFont::getBitmapFromCharacter(char character)
{
	if (character == 'k')
		return new Bitmap(font_units_k);
	else if (character == 'm')
		return new Bitmap(font_units_m);
	else if (character == '/')
		return new Bitmap(font_units_slash);
	else if (character == 'h')
		return new Bitmap(font_units_h);
}

Bitmap* DataFont::getBitmapFromCharacter(char character)
{
	if (character >= 48 && character <= 57)
		return new Bitmap(font_data_digits[character - 48]);
	else if (character == ',')
		return new Bitmap(font_data_comma);
}



